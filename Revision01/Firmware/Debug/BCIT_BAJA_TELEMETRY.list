
BCIT_BAJA_TELEMETRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800310c  0800310c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003154  08003154  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800315c  0800315c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0000415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003160  08003160  00004160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003164  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003170  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003170  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a15c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172b  00000000  00000000  0000f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  000108c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a1  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c84  00000000  00000000  00011811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a30c  00000000  00000000  00036495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3cb9  00000000  00000000  000407a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012445a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  001244a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00126730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030f4 	.word	0x080030f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030f4 	.word	0x080030f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa6a 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f806 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f886 	bl	8000610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f854 	bl	80005b0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x14>

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b096      	sub	sp, #88	@ 0x58
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2244      	movs	r2, #68	@ 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fdbd 	bl	800309a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000532:	f000 fd7f 	bl	8001034 <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800053c:	f000 f956 	bl	80007ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000548:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055a:	230a      	movs	r3, #10
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800055e:	2307      	movs	r3, #7
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fdb6 	bl	80010e0 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800057a:	f000 f937 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2303      	movs	r3, #3
 8000584:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	2104      	movs	r1, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f97e 	bl	8001898 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a2:	f000 f923 	bl	80007ec <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3758      	adds	r7, #88	@ 0x58
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <MX_USART2_UART_Init+0x5c>)
 80005b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ba:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART2_UART_Init+0x58>)
 80005f4:	f002 f830 	bl	8002658 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fe:	f000 f8f5 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b6e      	ldr	r3, [pc, #440]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a6d      	ldr	r2, [pc, #436]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b6b      	ldr	r3, [pc, #428]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b68      	ldr	r3, [pc, #416]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a67      	ldr	r2, [pc, #412]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b65      	ldr	r3, [pc, #404]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b62      	ldr	r3, [pc, #392]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a61      	ldr	r2, [pc, #388]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b5f      	ldr	r3, [pc, #380]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a5b      	ldr	r2, [pc, #364]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b59      	ldr	r3, [pc, #356]	@ (80007e0 <MX_GPIO_Init+0x1d0>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_7, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f240 4181 	movw	r1, #1153	@ 0x481
 800068c:	4855      	ldr	r0, [pc, #340]	@ (80007e4 <MX_GPIO_Init+0x1d4>)
 800068e:	f000 fcab 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, strainEN_Pin|V_batt_en_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 51d2 	mov.w	r1, #6720	@ 0x1a40
 8000698:	4853      	ldr	r0, [pc, #332]	@ (80007e8 <MX_GPIO_Init+0x1d8>)
 800069a:	f000 fca5 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f000 fc9e 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4849      	ldr	r0, [pc, #292]	@ (80007e8 <MX_GPIO_Init+0x1d8>)
 80006c4:	f000 fae6 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006c8:	2333      	movs	r3, #51	@ 0x33
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006cc:	230b      	movs	r3, #11
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4843      	ldr	r0, [pc, #268]	@ (80007e8 <MX_GPIO_Init+0x1d8>)
 80006dc:	f000 fada 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_7;
 80006e0:	23a3      	movs	r3, #163	@ 0xa3
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006e4:	230b      	movs	r3, #11
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f000 facd 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f000 fac0 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_7;
 8000714:	f240 4381 	movw	r3, #1153	@ 0x481
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0x1d4>)
 800072e:	f000 fab1 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000736:	230b      	movs	r3, #11
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4827      	ldr	r0, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0x1d4>)
 8000746:	f000 faa5 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : strainEN_Pin V_batt_en_Pin PC11 PC12 */
  GPIO_InitStruct.Pin = strainEN_Pin|V_batt_en_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800074a:	f44f 53d2 	mov.w	r3, #6720	@ 0x1a40
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4821      	ldr	r0, [pc, #132]	@ (80007e8 <MX_GPIO_Init+0x1d8>)
 8000764:	f000 fa96 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000768:	2380      	movs	r3, #128	@ 0x80
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <MX_GPIO_Init+0x1d8>)
 800077c:	f000 fa8a 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f000 fa7b 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f000 fa6b 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_GPIO_Init+0x1d4>)
 80007d4:	f000 fa5e 	bl	8000c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400
 80007e8:	48000800 	.word	0x48000800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	@ 0x60
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	@ 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0ac      	sub	sp, #176	@ 0xb0
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2288      	movs	r2, #136	@ 0x88
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fc1a 	bl	800309a <memset>
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <HAL_UART_MspInit+0xb0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d13b      	bne.n	80008e8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fa2f 	bl	8001ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000888:	f7ff ffb0 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000896:	6593      	str	r3, [r2, #88]	@ 0x58
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_UART_MspInit+0xb4>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	230c      	movs	r3, #12
 80008be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d4:	2307      	movs	r3, #7
 80008d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f000 f9d6 	bl	8000c94 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008e8:	bf00      	nop
 80008ea:	37b0      	adds	r7, #176	@ 0xb0
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f89b 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f002 fb7f 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fda1 	bl	80004f4 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08003164 	.word	0x08003164
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	200000b4 	.word	0x200000b4

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_Init+0x3c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_Init+0x3c>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 f920 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 f80f 	bl	8000a10 <HAL_InitTick>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	e001      	b.n	8000a02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009fe:	f7ff fefb 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_InitTick+0x6c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d023      	beq.n	8000a6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <HAL_InitTick+0x70>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f91d 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10f      	bne.n	8000a66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d809      	bhi.n	8000a60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f8f5 	bl	8000c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_InitTick+0x74>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e007      	b.n	8000a70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e004      	b.n	8000a70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e001      	b.n	8000a70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200000b0 	.word	0x200000b0

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000b0 	.word	0x200000b0

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff47 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff5c 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffb0 	bl	8000be8 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e17f      	b.n	8000fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 8171 	beq.w	8000f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d005      	beq.n	8000cd4 <HAL_GPIO_Init+0x40>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d130      	bne.n	8000d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	f003 0201 	and.w	r2, r3, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d118      	bne.n	8000d74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	6939      	ldr	r1, [r7, #16]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ac 	beq.w	8000f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x242>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <HAL_GPIO_Init+0x338>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x23e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd0 <HAL_GPIO_Init+0x33c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x23a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <HAL_GPIO_Init+0x340>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x236>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x344>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x232>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_GPIO_Init+0x348>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x22e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe0 <HAL_GPIO_Init+0x34c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x22a>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00c      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00a      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x244>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee8:	4937      	ldr	r1, [pc, #220]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1a:	4a32      	ldr	r2, [pc, #200]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae78 	bne.w	8000ca4 <HAL_GPIO_Init+0x10>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	48001000 	.word	0x48001000
 8000fdc:	48001400 	.word	0x48001400
 8000fe0:	48001800 	.word	0x48001800
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e002      	b.n	800100c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <HAL_PWREx_GetVoltageRange+0x18>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40007000 	.word	0x40007000

08001034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001042:	d130      	bne.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800104c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001050:	d038      	beq.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800105a:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2232      	movs	r2, #50	@ 0x32
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4a1b      	ldr	r2, [pc, #108]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	3301      	adds	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001078:	e002      	b.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3b01      	subs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108c:	d102      	bne.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f2      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a0:	d110      	bne.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e00f      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b2:	d007      	beq.n	80010c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010bc:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40007000 	.word	0x40007000
 80010d8:	20000000 	.word	0x20000000
 80010dc:	431bde83 	.word	0x431bde83

080010e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e3ca      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f2:	4b97      	ldr	r3, [pc, #604]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fc:	4b94      	ldr	r3, [pc, #592]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80e4 	beq.w	80012dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_RCC_OscConfig+0x4a>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b0c      	cmp	r3, #12
 800111e:	f040 808b 	bne.w	8001238 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 8087 	bne.w	8001238 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112a:	4b89      	ldr	r3, [pc, #548]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x62>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e3a2      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1a      	ldr	r2, [r3, #32]
 8001146:	4b82      	ldr	r3, [pc, #520]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_RCC_OscConfig+0x7c>
 8001152:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800115a:	e005      	b.n	8001168 <HAL_RCC_OscConfig+0x88>
 800115c:	4b7c      	ldr	r3, [pc, #496]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001168:	4293      	cmp	r3, r2
 800116a:	d223      	bcs.n	80011b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd55 	bl	8001c20 <RCC_SetFlashLatencyFromMSIRange>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e383      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001180:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a72      	ldr	r2, [pc, #456]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b70      	ldr	r3, [pc, #448]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	496d      	ldr	r1, [pc, #436]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119e:	4b6c      	ldr	r3, [pc, #432]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4968      	ldr	r1, [pc, #416]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
 80011b2:	e025      	b.n	8001200 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b4:	4b66      	ldr	r3, [pc, #408]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a65      	ldr	r2, [pc, #404]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b63      	ldr	r3, [pc, #396]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4960      	ldr	r1, [pc, #384]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	495b      	ldr	r1, [pc, #364]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fd15 	bl	8001c20 <RCC_SetFlashLatencyFromMSIRange>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e343      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001200:	f000 fc4a 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4950      	ldr	r1, [pc, #320]	@ (8001354 <HAL_RCC_OscConfig+0x274>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_RCC_OscConfig+0x278>)
 800121e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001220:	4b4e      	ldr	r3, [pc, #312]	@ (800135c <HAL_RCC_OscConfig+0x27c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fbf3 	bl	8000a10 <HAL_InitTick>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d052      	beq.n	80012da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	e327      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d032      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001240:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a42      	ldr	r2, [pc, #264]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc30 	bl	8000ab0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001254:	f7ff fc2c 	bl	8000ab0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e310      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001266:	4b3a      	ldr	r3, [pc, #232]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a36      	ldr	r2, [pc, #216]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4931      	ldr	r1, [pc, #196]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	492c      	ldr	r1, [pc, #176]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e01a      	b.n	80012dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a29      	ldr	r2, [pc, #164]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fbfd 	bl	8000ab0 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ba:	f7ff fbf9 	bl	8000ab0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e2dd      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x1da>
 80012d8:	e000      	b.n	80012dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d074      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x21a>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d10e      	bne.n	8001312 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d10b      	bne.n	8001312 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d064      	beq.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d160      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2ba      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x24a>
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e026      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001332:	d115      	bne.n	8001360 <HAL_RCC_OscConfig+0x280>
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 800133a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a02      	ldr	r2, [pc, #8]	@ (8001350 <HAL_RCC_OscConfig+0x270>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x298>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	0800310c 	.word	0x0800310c
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004
 8001360:	4ba0      	ldr	r3, [pc, #640]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a9f      	ldr	r2, [pc, #636]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b9d      	ldr	r3, [pc, #628]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a9c      	ldr	r2, [pc, #624]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb96 	bl	8000ab0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fb92 	bl	8000ab0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	@ 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e276      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	4b92      	ldr	r3, [pc, #584]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x2a8>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb82 	bl	8000ab0 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb7e 	bl	8000ab0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e262      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2d0>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d060      	beq.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x310>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d119      	bne.n	800141e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d116      	bne.n	800141e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f0:	4b7c      	ldr	r3, [pc, #496]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x328>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e23f      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	4973      	ldr	r1, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800141c:	e040      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d023      	beq.n	800146e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6e      	ldr	r2, [pc, #440]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fb3d 	bl	8000ab0 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fb39 	bl	8000ab0 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e21d      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144c:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b62      	ldr	r3, [pc, #392]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	495f      	ldr	r1, [pc, #380]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e018      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b5d      	ldr	r3, [pc, #372]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5c      	ldr	r2, [pc, #368]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fb19 	bl	8000ab0 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fb15 	bl	8000ab0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1f9      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d03c      	beq.n	8001526 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01c      	beq.n	80014ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b4:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ba:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff faf4 	bl	8000ab0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff faf0 	bl	8000ab0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1d4      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014de:	4b41      	ldr	r3, [pc, #260]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ef      	beq.n	80014cc <HAL_RCC_OscConfig+0x3ec>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f4:	4a3b      	ldr	r2, [pc, #236]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fad7 	bl	8000ab0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fad3 	bl	8000ab0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1b7      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ef      	bne.n	8001506 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10d      	bne.n	8001560 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 800154a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155c:	2301      	movs	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d118      	bne.n	800159e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001578:	f7ff fa9a 	bl	8000ab0 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fa96 	bl	8000ab0 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e17a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_RCC_OscConfig+0x508>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4d8>
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b6:	e029      	b.n	800160c <HAL_RCC_OscConfig+0x52c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d115      	bne.n	80015ec <HAL_RCC_OscConfig+0x50c>
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	4a03      	ldr	r2, [pc, #12]	@ (80015e4 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0x52c>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40007000 	.word	0x40007000
 80015ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f2:	4a9b      	ldr	r2, [pc, #620]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015fc:	4b98      	ldr	r3, [pc, #608]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001602:	4a97      	ldr	r2, [pc, #604]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d016      	beq.n	8001642 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fa4c 	bl	8000ab0 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fa48 	bl	8000ab0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e12a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001632:	4b8b      	ldr	r3, [pc, #556]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ed      	beq.n	800161c <HAL_RCC_OscConfig+0x53c>
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fa35 	bl	8000ab0 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fa31 	bl	8000ab0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e113      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001660:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ed      	bne.n	800164a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166e:	7ffb      	ldrb	r3, [r7, #31]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b7a      	ldr	r3, [pc, #488]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	4a79      	ldr	r2, [pc, #484]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80fe 	beq.w	8001886 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	2b02      	cmp	r3, #2
 8001690:	f040 80d0 	bne.w	8001834 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001694:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d130      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	3b01      	subs	r3, #1
 80016b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d127      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11f      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016d4:	2a07      	cmp	r2, #7
 80016d6:	bf14      	ite	ne
 80016d8:	2201      	movne	r2, #1
 80016da:	2200      	moveq	r2, #0
 80016dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016de:	4293      	cmp	r3, r2
 80016e0:	d113      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d109      	bne.n	800170a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d06e      	beq.n	80017e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d069      	beq.n	80017e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800171c:	4b50      	ldr	r3, [pc, #320]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0ad      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800172c:	4b4c      	ldr	r3, [pc, #304]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001738:	f7ff f9ba 	bl	8000ab0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f9b6 	bl	8000ab0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e09a      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001752:	4b43      	ldr	r3, [pc, #268]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b40      	ldr	r3, [pc, #256]	@ (8001864 <HAL_RCC_OscConfig+0x784>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800176e:	3a01      	subs	r2, #1
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001778:	0212      	lsls	r2, r2, #8
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001780:	0852      	lsrs	r2, r2, #1
 8001782:	3a01      	subs	r2, #1
 8001784:	0552      	lsls	r2, r2, #21
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800178c:	0852      	lsrs	r2, r2, #1
 800178e:	3a01      	subs	r2, #1
 8001790:	0652      	lsls	r2, r2, #25
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001798:	0912      	lsrs	r2, r2, #4
 800179a:	0452      	lsls	r2, r2, #17
 800179c:	430a      	orrs	r2, r1
 800179e:	4930      	ldr	r1, [pc, #192]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017bc:	f7ff f978 	bl	8000ab0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f974 	bl	8000ab0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e058      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e2:	e050      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e04f      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d148      	bne.n	8001886 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a16      	ldr	r2, [pc, #88]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800180c:	f7ff f950 	bl	8000ab0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f94c 	bl	8000ab0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e030      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x734>
 8001832:	e028      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d023      	beq.n	8001882 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_RCC_OscConfig+0x780>)
 8001840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff f933 	bl	8000ab0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e00c      	b.n	8001868 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f92f 	bl	8000ab0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d905      	bls.n	8001868 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e013      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
 8001860:	40021000 	.word	0x40021000
 8001864:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ec      	bne.n	800184e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4905      	ldr	r1, [pc, #20]	@ (8001890 <HAL_RCC_OscConfig+0x7b0>)
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_OscConfig+0x7b4>)
 800187c:	4013      	ands	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
 8001880:	e001      	b.n	8001886 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	feeefffc 	.word	0xfeeefffc

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0e7      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b75      	ldr	r3, [pc, #468]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d910      	bls.n	80018dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4970      	ldr	r1, [pc, #448]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0cf      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d908      	bls.n	800190a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4960      	ldr	r1, [pc, #384]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04c      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d121      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0a6      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4b54      	ldr	r3, [pc, #336]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d115      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e09a      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e08e      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e086      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4943      	ldr	r1, [pc, #268]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001980:	f7ff f896 	bl	8000ab0 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff f892 	bl	8000ab0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e06e      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d208      	bcs.n	80019de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	492b      	ldr	r1, [pc, #172]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d210      	bcs.n	8001a0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 0207 	bic.w	r2, r3, #7
 80019f4:	4923      	ldr	r1, [pc, #140]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e036      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4918      	ldr	r1, [pc, #96]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4c:	f000 f824 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	490b      	ldr	r1, [pc, #44]	@ (8001a8c <HAL_RCC_ClockConfig+0x1f4>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1fc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ffcd 	bl	8000a10 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	0800310c 	.word	0x0800310c
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d121      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d11e      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001acc:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ad8:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	e004      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d134      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d003      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0xac>
 8001b3c:	e005      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b40:	617b      	str	r3, [r7, #20]
      break;
 8001b42:	e005      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x114>)
 8001b46:	617b      	str	r3, [r7, #20]
      break;
 8001b48:	e002      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	617b      	str	r3, [r7, #20]
      break;
 8001b4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	0e5b      	lsrs	r3, r3, #25
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	3301      	adds	r3, #1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b90:	69bb      	ldr	r3, [r7, #24]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003124 	.word	0x08003124
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4904      	ldr	r1, [pc, #16]	@ (8001bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	0800311c 	.word	0x0800311c

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bf8:	f7ff ffda 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0adb      	lsrs	r3, r3, #11
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4904      	ldr	r1, [pc, #16]	@ (8001c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	0800311c 	.word	0x0800311c

08001c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c38:	f7ff f9ee 	bl	8001018 <HAL_PWREx_GetVoltageRange>
 8001c3c:	6178      	str	r0, [r7, #20]
 8001c3e:	e014      	b.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c58:	f7ff f9de 	bl	8001018 <HAL_PWREx_GetVoltageRange>
 8001c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c70:	d10b      	bne.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b80      	cmp	r3, #128	@ 0x80
 8001c76:	d919      	bls.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c7c:	d902      	bls.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c7e:	2302      	movs	r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	e013      	b.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c84:	2301      	movs	r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e010      	b.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b80      	cmp	r3, #128	@ 0x80
 8001c8e:	d902      	bls.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c90:	2303      	movs	r3, #3
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	e00a      	b.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b80      	cmp	r3, #128	@ 0x80
 8001c9a:	d102      	bne.n	8001ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e004      	b.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b70      	cmp	r3, #112	@ 0x70
 8001ca6:	d101      	bne.n	8001cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 0207 	bic.w	r2, r3, #7
 8001cb4:	4909      	ldr	r1, [pc, #36]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cec:	2300      	movs	r3, #0
 8001cee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d041      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d04:	d02a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d0a:	d824      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d10:	d008      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d16:	d81e      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00a      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d20:	d010      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d22:	e018      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d24:	4b86      	ldr	r3, [pc, #536]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a85      	ldr	r2, [pc, #532]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d30:	e015      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fabb 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d42:	e00c      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3320      	adds	r3, #32
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fba6 	bl	800249c <RCCEx_PLLSAI2_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d54:	e003      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	74fb      	strb	r3, [r7, #19]
      break;
 8001d5a:	e000      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d64:	4b76      	ldr	r3, [pc, #472]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d72:	4973      	ldr	r1, [pc, #460]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d7a:	e001      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d041      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d94:	d02a      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d9a:	d824      	bhi.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001da0:	d008      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001da6:	d81e      	bhi.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001db2:	e018      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001db4:	4b62      	ldr	r3, [pc, #392]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a61      	ldr	r2, [pc, #388]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dc0:	e015      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fa73 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dd2:	e00c      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3320      	adds	r3, #32
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fb5e 	bl	800249c <RCCEx_PLLSAI2_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001de4:	e003      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dea:	e000      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001df4:	4b52      	ldr	r3, [pc, #328]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e02:	494f      	ldr	r1, [pc, #316]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e0a:	e001      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a0 	beq.w	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	4a40      	ldr	r2, [pc, #256]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e44:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e54:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3a      	ldr	r2, [pc, #232]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e60:	f7fe fe26 	bl	8000ab0 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e66:	e009      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7fe fe22 	bl	8000ab0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d902      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	74fb      	strb	r3, [r7, #19]
        break;
 8001e7a:	e005      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e7c:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ef      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d15c      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01f      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d019      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eb8:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a20      	ldr	r2, [pc, #128]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe fde1 	bl	8000ab0 <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fddd 	bl	8000ab0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	74fb      	strb	r3, [r7, #19]
            break;
 8001f08:	e006      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ec      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f2e:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f36:	e009      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	74bb      	strb	r3, [r7, #18]
 8001f3c:	e006      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4c:	7c7b      	ldrb	r3, [r7, #17]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b9e      	ldr	r3, [pc, #632]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a9d      	ldr	r2, [pc, #628]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6a:	4b98      	ldr	r3, [pc, #608]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f70:	f023 0203 	bic.w	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f78:	4994      	ldr	r1, [pc, #592]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	f023 020c 	bic.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	498c      	ldr	r1, [pc, #560]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fae:	4b87      	ldr	r3, [pc, #540]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	4983      	ldr	r1, [pc, #524]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	497b      	ldr	r1, [pc, #492]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ff2:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002000:	4972      	ldr	r1, [pc, #456]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002014:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	496a      	ldr	r1, [pc, #424]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002036:	4b65      	ldr	r3, [pc, #404]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	4961      	ldr	r1, [pc, #388]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002058:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	4959      	ldr	r1, [pc, #356]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800207a:	4b54      	ldr	r3, [pc, #336]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002080:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002088:	4950      	ldr	r1, [pc, #320]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	4948      	ldr	r1, [pc, #288]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020be:	4b43      	ldr	r3, [pc, #268]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	493f      	ldr	r1, [pc, #252]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d028      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e0:	4b3a      	ldr	r3, [pc, #232]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ee:	4937      	ldr	r1, [pc, #220]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fe:	d106      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a31      	ldr	r2, [pc, #196]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800210a:	60d3      	str	r3, [r2, #12]
 800210c:	e011      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002116:	d10c      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8c8 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d028      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800213e:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002144:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214c:	491f      	ldr	r1, [pc, #124]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215c:	d106      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215e:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002168:	60d3      	str	r3, [r2, #12]
 800216a:	e011      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002174:	d10c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	2101      	movs	r1, #1
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f899 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 8002182:	4603      	mov	r3, r0
 8002184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02b      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021aa:	4908      	ldr	r1, [pc, #32]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ba:	d109      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a02      	ldr	r2, [pc, #8]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c6:	60d3      	str	r3, [r2, #12]
 80021c8:	e014      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f867 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02f      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002200:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800220e:	4928      	ldr	r1, [pc, #160]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800221a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800221e:	d10d      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	2102      	movs	r1, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f844 	bl	80022b4 <RCCEx_PLLSAI1_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d014      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	74bb      	strb	r3, [r7, #18]
 800223a:	e011      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002244:	d10c      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3320      	adds	r3, #32
 800224a:	2102      	movs	r1, #2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f925 	bl	800249c <RCCEx_PLLSAI2_Config>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800227a:	490d      	ldr	r1, [pc, #52]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800229e:	4904      	ldr	r1, [pc, #16]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022c2:	4b75      	ldr	r3, [pc, #468]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d018      	beq.n	8002300 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022ce:	4b72      	ldr	r3, [pc, #456]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0203 	and.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d10d      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
       ||
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
       ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d047      	beq.n	800238a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e044      	b.n	800238a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d018      	beq.n	800233a <RCCEx_PLLSAI1_Config+0x86>
 8002308:	2b03      	cmp	r3, #3
 800230a:	d825      	bhi.n	8002358 <RCCEx_PLLSAI1_Config+0xa4>
 800230c:	2b01      	cmp	r3, #1
 800230e:	d002      	beq.n	8002316 <RCCEx_PLLSAI1_Config+0x62>
 8002310:	2b02      	cmp	r3, #2
 8002312:	d009      	beq.n	8002328 <RCCEx_PLLSAI1_Config+0x74>
 8002314:	e020      	b.n	8002358 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002316:	4b60      	ldr	r3, [pc, #384]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11d      	bne.n	800235e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002326:	e01a      	b.n	800235e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d116      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e013      	b.n	8002362 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800233a:	4b57      	ldr	r3, [pc, #348]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002356:	e006      	b.n	8002366 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e004      	b.n	8002368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800235e:	bf00      	nop
 8002360:	e002      	b.n	8002368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002366:	bf00      	nop
    }

    if(status == HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800236e:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	430b      	orrs	r3, r1
 8002384:	4944      	ldr	r1, [pc, #272]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d17d      	bne.n	800248c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002390:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800239a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239c:	f7fe fb88 	bl	8000ab0 <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a2:	e009      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a4:	f7fe fb84 	bl	8000ab0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d902      	bls.n	80023b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	73fb      	strb	r3, [r7, #15]
        break;
 80023b6:	e005      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023b8:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ef      	bne.n	80023a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d160      	bne.n	800248c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d111      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80023d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6892      	ldr	r2, [r2, #8]
 80023e0:	0211      	lsls	r1, r2, #8
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	0912      	lsrs	r2, r2, #4
 80023e8:	0452      	lsls	r2, r2, #17
 80023ea:	430a      	orrs	r2, r1
 80023ec:	492a      	ldr	r1, [pc, #168]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	610b      	str	r3, [r1, #16]
 80023f2:	e027      	b.n	8002444 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d112      	bne.n	8002420 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002402:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	0211      	lsls	r1, r2, #8
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6912      	ldr	r2, [r2, #16]
 8002410:	0852      	lsrs	r2, r2, #1
 8002412:	3a01      	subs	r2, #1
 8002414:	0552      	lsls	r2, r2, #21
 8002416:	430a      	orrs	r2, r1
 8002418:	491f      	ldr	r1, [pc, #124]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	610b      	str	r3, [r1, #16]
 800241e:	e011      	b.n	8002444 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002420:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002428:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6952      	ldr	r2, [r2, #20]
 8002436:	0852      	lsrs	r2, r2, #1
 8002438:	3a01      	subs	r2, #1
 800243a:	0652      	lsls	r2, r2, #25
 800243c:	430a      	orrs	r2, r1
 800243e:	4916      	ldr	r1, [pc, #88]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a13      	ldr	r2, [pc, #76]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800244e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fb2e 	bl	8000ab0 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002456:	e009      	b.n	800246c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002458:	f7fe fb2a 	bl	8000ab0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	73fb      	strb	r3, [r7, #15]
          break;
 800246a:	e005      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800246c:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ef      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4904      	ldr	r1, [pc, #16]	@ (8002498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d018      	beq.n	80024e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10d      	bne.n	80024e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024ce:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
       ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d047      	beq.n	8002572 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e044      	b.n	8002572 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d018      	beq.n	8002522 <RCCEx_PLLSAI2_Config+0x86>
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d825      	bhi.n	8002540 <RCCEx_PLLSAI2_Config+0xa4>
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d002      	beq.n	80024fe <RCCEx_PLLSAI2_Config+0x62>
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d009      	beq.n	8002510 <RCCEx_PLLSAI2_Config+0x74>
 80024fc:	e020      	b.n	8002540 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024fe:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11d      	bne.n	8002546 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250e:	e01a      	b.n	8002546 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002510:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d116      	bne.n	800254a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e013      	b.n	800254a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002522:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800252e:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800253e:	e006      	b.n	800254e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e004      	b.n	8002550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800254e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	430b      	orrs	r3, r1
 800256c:	4939      	ldr	r1, [pc, #228]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d167      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a35      	ldr	r2, [pc, #212]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe fa94 	bl	8000ab0 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800258a:	e009      	b.n	80025a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800258c:	f7fe fa90 	bl	8000ab0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d902      	bls.n	80025a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	73fb      	strb	r3, [r7, #15]
        break;
 800259e:	e005      	b.n	80025ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ef      	bne.n	800258c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d14a      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025b8:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6892      	ldr	r2, [r2, #8]
 80025c8:	0211      	lsls	r1, r2, #8
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	0912      	lsrs	r2, r2, #4
 80025d0:	0452      	lsls	r2, r2, #17
 80025d2:	430a      	orrs	r2, r1
 80025d4:	491f      	ldr	r1, [pc, #124]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	614b      	str	r3, [r1, #20]
 80025da:	e011      	b.n	8002600 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	0211      	lsls	r1, r2, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6912      	ldr	r2, [r2, #16]
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0652      	lsls	r2, r2, #25
 80025f8:	430a      	orrs	r2, r1
 80025fa:	4916      	ldr	r1, [pc, #88]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a13      	ldr	r2, [pc, #76]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fa50 	bl	8000ab0 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002612:	e009      	b.n	8002628 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002614:	f7fe fa4c 	bl	8000ab0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d902      	bls.n	8002628 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
          break;
 8002626:	e005      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4904      	ldr	r1, [pc, #16]	@ (8002654 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e040      	b.n	80026ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f8e0 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	@ 0x24
 8002684:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fae0 	bl	8002c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f825 	bl	80026f4 <UART_SetConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e01b      	b.n	80026ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb5f 	bl	8002da8 <UART_CheckIdleState>
 80026ea:	4603      	mov	r3, r0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b08a      	sub	sp, #40	@ 0x28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4313      	orrs	r3, r2
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4ba4      	ldr	r3, [pc, #656]	@ (80029b4 <UART_SetConfig+0x2c0>)
 8002724:	4013      	ands	r3, r2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800272c:	430b      	orrs	r3, r1
 800272e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a99      	ldr	r2, [pc, #612]	@ (80029b8 <UART_SetConfig+0x2c4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275c:	4313      	orrs	r3, r2
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a90      	ldr	r2, [pc, #576]	@ (80029bc <UART_SetConfig+0x2c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d126      	bne.n	80027cc <UART_SetConfig+0xd8>
 800277e:	4b90      	ldr	r3, [pc, #576]	@ (80029c0 <UART_SetConfig+0x2cc>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d81b      	bhi.n	80027c4 <UART_SetConfig+0xd0>
 800278c:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <UART_SetConfig+0xa0>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b5 	.word	0x080027b5
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027aa:	e116      	b.n	80029da <UART_SetConfig+0x2e6>
 80027ac:	2302      	movs	r3, #2
 80027ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027b2:	e112      	b.n	80029da <UART_SetConfig+0x2e6>
 80027b4:	2304      	movs	r3, #4
 80027b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ba:	e10e      	b.n	80029da <UART_SetConfig+0x2e6>
 80027bc:	2308      	movs	r3, #8
 80027be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027c2:	e10a      	b.n	80029da <UART_SetConfig+0x2e6>
 80027c4:	2310      	movs	r3, #16
 80027c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ca:	e106      	b.n	80029da <UART_SetConfig+0x2e6>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7c      	ldr	r2, [pc, #496]	@ (80029c4 <UART_SetConfig+0x2d0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d138      	bne.n	8002848 <UART_SetConfig+0x154>
 80027d6:	4b7a      	ldr	r3, [pc, #488]	@ (80029c0 <UART_SetConfig+0x2cc>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d82d      	bhi.n	8002840 <UART_SetConfig+0x14c>
 80027e4:	a201      	add	r2, pc, #4	@ (adr r2, 80027ec <UART_SetConfig+0xf8>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002841 	.word	0x08002841
 80027f4:	08002841 	.word	0x08002841
 80027f8:	08002841 	.word	0x08002841
 80027fc:	08002831 	.word	0x08002831
 8002800:	08002841 	.word	0x08002841
 8002804:	08002841 	.word	0x08002841
 8002808:	08002841 	.word	0x08002841
 800280c:	08002829 	.word	0x08002829
 8002810:	08002841 	.word	0x08002841
 8002814:	08002841 	.word	0x08002841
 8002818:	08002841 	.word	0x08002841
 800281c:	08002839 	.word	0x08002839
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002826:	e0d8      	b.n	80029da <UART_SetConfig+0x2e6>
 8002828:	2302      	movs	r3, #2
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282e:	e0d4      	b.n	80029da <UART_SetConfig+0x2e6>
 8002830:	2304      	movs	r3, #4
 8002832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002836:	e0d0      	b.n	80029da <UART_SetConfig+0x2e6>
 8002838:	2308      	movs	r3, #8
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800283e:	e0cc      	b.n	80029da <UART_SetConfig+0x2e6>
 8002840:	2310      	movs	r3, #16
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002846:	e0c8      	b.n	80029da <UART_SetConfig+0x2e6>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5e      	ldr	r2, [pc, #376]	@ (80029c8 <UART_SetConfig+0x2d4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d125      	bne.n	800289e <UART_SetConfig+0x1aa>
 8002852:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <UART_SetConfig+0x2cc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800285c:	2b30      	cmp	r3, #48	@ 0x30
 800285e:	d016      	beq.n	800288e <UART_SetConfig+0x19a>
 8002860:	2b30      	cmp	r3, #48	@ 0x30
 8002862:	d818      	bhi.n	8002896 <UART_SetConfig+0x1a2>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d00a      	beq.n	800287e <UART_SetConfig+0x18a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d814      	bhi.n	8002896 <UART_SetConfig+0x1a2>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <UART_SetConfig+0x182>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d008      	beq.n	8002886 <UART_SetConfig+0x192>
 8002874:	e00f      	b.n	8002896 <UART_SetConfig+0x1a2>
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287c:	e0ad      	b.n	80029da <UART_SetConfig+0x2e6>
 800287e:	2302      	movs	r3, #2
 8002880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002884:	e0a9      	b.n	80029da <UART_SetConfig+0x2e6>
 8002886:	2304      	movs	r3, #4
 8002888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800288c:	e0a5      	b.n	80029da <UART_SetConfig+0x2e6>
 800288e:	2308      	movs	r3, #8
 8002890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002894:	e0a1      	b.n	80029da <UART_SetConfig+0x2e6>
 8002896:	2310      	movs	r3, #16
 8002898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289c:	e09d      	b.n	80029da <UART_SetConfig+0x2e6>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <UART_SetConfig+0x2d8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d125      	bne.n	80028f4 <UART_SetConfig+0x200>
 80028a8:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <UART_SetConfig+0x2cc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80028b4:	d016      	beq.n	80028e4 <UART_SetConfig+0x1f0>
 80028b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80028b8:	d818      	bhi.n	80028ec <UART_SetConfig+0x1f8>
 80028ba:	2b80      	cmp	r3, #128	@ 0x80
 80028bc:	d00a      	beq.n	80028d4 <UART_SetConfig+0x1e0>
 80028be:	2b80      	cmp	r3, #128	@ 0x80
 80028c0:	d814      	bhi.n	80028ec <UART_SetConfig+0x1f8>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <UART_SetConfig+0x1d8>
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d008      	beq.n	80028dc <UART_SetConfig+0x1e8>
 80028ca:	e00f      	b.n	80028ec <UART_SetConfig+0x1f8>
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028d2:	e082      	b.n	80029da <UART_SetConfig+0x2e6>
 80028d4:	2302      	movs	r3, #2
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028da:	e07e      	b.n	80029da <UART_SetConfig+0x2e6>
 80028dc:	2304      	movs	r3, #4
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028e2:	e07a      	b.n	80029da <UART_SetConfig+0x2e6>
 80028e4:	2308      	movs	r3, #8
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ea:	e076      	b.n	80029da <UART_SetConfig+0x2e6>
 80028ec:	2310      	movs	r3, #16
 80028ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f2:	e072      	b.n	80029da <UART_SetConfig+0x2e6>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a35      	ldr	r2, [pc, #212]	@ (80029d0 <UART_SetConfig+0x2dc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12a      	bne.n	8002954 <UART_SetConfig+0x260>
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <UART_SetConfig+0x2cc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800290c:	d01a      	beq.n	8002944 <UART_SetConfig+0x250>
 800290e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002912:	d81b      	bhi.n	800294c <UART_SetConfig+0x258>
 8002914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002918:	d00c      	beq.n	8002934 <UART_SetConfig+0x240>
 800291a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800291e:	d815      	bhi.n	800294c <UART_SetConfig+0x258>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <UART_SetConfig+0x238>
 8002924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002928:	d008      	beq.n	800293c <UART_SetConfig+0x248>
 800292a:	e00f      	b.n	800294c <UART_SetConfig+0x258>
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002932:	e052      	b.n	80029da <UART_SetConfig+0x2e6>
 8002934:	2302      	movs	r3, #2
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293a:	e04e      	b.n	80029da <UART_SetConfig+0x2e6>
 800293c:	2304      	movs	r3, #4
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e04a      	b.n	80029da <UART_SetConfig+0x2e6>
 8002944:	2308      	movs	r3, #8
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	e046      	b.n	80029da <UART_SetConfig+0x2e6>
 800294c:	2310      	movs	r3, #16
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002952:	e042      	b.n	80029da <UART_SetConfig+0x2e6>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <UART_SetConfig+0x2c4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13a      	bne.n	80029d4 <UART_SetConfig+0x2e0>
 800295e:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <UART_SetConfig+0x2cc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800296c:	d01a      	beq.n	80029a4 <UART_SetConfig+0x2b0>
 800296e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002972:	d81b      	bhi.n	80029ac <UART_SetConfig+0x2b8>
 8002974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002978:	d00c      	beq.n	8002994 <UART_SetConfig+0x2a0>
 800297a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800297e:	d815      	bhi.n	80029ac <UART_SetConfig+0x2b8>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <UART_SetConfig+0x298>
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002988:	d008      	beq.n	800299c <UART_SetConfig+0x2a8>
 800298a:	e00f      	b.n	80029ac <UART_SetConfig+0x2b8>
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002992:	e022      	b.n	80029da <UART_SetConfig+0x2e6>
 8002994:	2302      	movs	r3, #2
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299a:	e01e      	b.n	80029da <UART_SetConfig+0x2e6>
 800299c:	2304      	movs	r3, #4
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e01a      	b.n	80029da <UART_SetConfig+0x2e6>
 80029a4:	2308      	movs	r3, #8
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e016      	b.n	80029da <UART_SetConfig+0x2e6>
 80029ac:	2310      	movs	r3, #16
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b2:	e012      	b.n	80029da <UART_SetConfig+0x2e6>
 80029b4:	efff69f3 	.word	0xefff69f3
 80029b8:	40008000 	.word	0x40008000
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40004c00 	.word	0x40004c00
 80029d0:	40005000 	.word	0x40005000
 80029d4:	2310      	movs	r3, #16
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a9f      	ldr	r2, [pc, #636]	@ (8002c5c <UART_SetConfig+0x568>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d17a      	bne.n	8002ada <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d824      	bhi.n	8002a36 <UART_SetConfig+0x342>
 80029ec:	a201      	add	r2, pc, #4	@ (adr r2, 80029f4 <UART_SetConfig+0x300>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a19 	.word	0x08002a19
 80029f8:	08002a37 	.word	0x08002a37
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a37 	.word	0x08002a37
 8002a04:	08002a27 	.word	0x08002a27
 8002a08:	08002a37 	.word	0x08002a37
 8002a0c:	08002a37 	.word	0x08002a37
 8002a10:	08002a37 	.word	0x08002a37
 8002a14:	08002a2f 	.word	0x08002a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a18:	f7ff f8d6 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	61f8      	str	r0, [r7, #28]
        break;
 8002a1e:	e010      	b.n	8002a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a20:	4b8f      	ldr	r3, [pc, #572]	@ (8002c60 <UART_SetConfig+0x56c>)
 8002a22:	61fb      	str	r3, [r7, #28]
        break;
 8002a24:	e00d      	b.n	8002a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a26:	f7ff f837 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002a2a:	61f8      	str	r0, [r7, #28]
        break;
 8002a2c:	e009      	b.n	8002a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a32:	61fb      	str	r3, [r7, #28]
        break;
 8002a34:	e005      	b.n	8002a42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002a40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80fb 	beq.w	8002c40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d305      	bcc.n	8002a66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d903      	bls.n	8002a6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a6c:	e0e8      	b.n	8002c40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2200      	movs	r2, #0
 8002a72:	461c      	mov	r4, r3
 8002a74:	4615      	mov	r5, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	022b      	lsls	r3, r5, #8
 8002a80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a84:	0222      	lsls	r2, r4, #8
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	6849      	ldr	r1, [r1, #4]
 8002a8a:	0849      	lsrs	r1, r1, #1
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4688      	mov	r8, r1
 8002a90:	4681      	mov	r9, r0
 8002a92:	eb12 0a08 	adds.w	sl, r2, r8
 8002a96:	eb43 0b09 	adc.w	fp, r3, r9
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa8:	4650      	mov	r0, sl
 8002aaa:	4659      	mov	r1, fp
 8002aac:	f7fd fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002abe:	d308      	bcc.n	8002ad2 <UART_SetConfig+0x3de>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ac6:	d204      	bcs.n	8002ad2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e0b6      	b.n	8002c40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ad8:	e0b2      	b.n	8002c40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae2:	d15e      	bne.n	8002ba2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d828      	bhi.n	8002b3e <UART_SetConfig+0x44a>
 8002aec:	a201      	add	r2, pc, #4	@ (adr r2, 8002af4 <UART_SetConfig+0x400>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	08002b29 	.word	0x08002b29
 8002b00:	08002b3f 	.word	0x08002b3f
 8002b04:	08002b2f 	.word	0x08002b2f
 8002b08:	08002b3f 	.word	0x08002b3f
 8002b0c:	08002b3f 	.word	0x08002b3f
 8002b10:	08002b3f 	.word	0x08002b3f
 8002b14:	08002b37 	.word	0x08002b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b18:	f7ff f856 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	61f8      	str	r0, [r7, #28]
        break;
 8002b1e:	e014      	b.n	8002b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f868 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002b24:	61f8      	str	r0, [r7, #28]
        break;
 8002b26:	e010      	b.n	8002b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b28:	4b4d      	ldr	r3, [pc, #308]	@ (8002c60 <UART_SetConfig+0x56c>)
 8002b2a:	61fb      	str	r3, [r7, #28]
        break;
 8002b2c:	e00d      	b.n	8002b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2e:	f7fe ffb3 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002b32:	61f8      	str	r0, [r7, #28]
        break;
 8002b34:	e009      	b.n	8002b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b3a:	61fb      	str	r3, [r7, #28]
        break;
 8002b3c:	e005      	b.n	8002b4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d077      	beq.n	8002c40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005a      	lsls	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d916      	bls.n	8002b9a <UART_SetConfig+0x4a6>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b72:	d212      	bcs.n	8002b9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f023 030f 	bic.w	r3, r3, #15
 8002b7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	8afa      	ldrh	r2, [r7, #22]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e052      	b.n	8002c40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ba0:	e04e      	b.n	8002c40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d827      	bhi.n	8002bfa <UART_SetConfig+0x506>
 8002baa:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <UART_SetConfig+0x4bc>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002bfb 	.word	0x08002bfb
 8002bc0:	08002beb 	.word	0x08002beb
 8002bc4:	08002bfb 	.word	0x08002bfb
 8002bc8:	08002bfb 	.word	0x08002bfb
 8002bcc:	08002bfb 	.word	0x08002bfb
 8002bd0:	08002bf3 	.word	0x08002bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7fe fff8 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	61f8      	str	r0, [r7, #28]
        break;
 8002bda:	e014      	b.n	8002c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f7ff f80a 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002be0:	61f8      	str	r0, [r7, #28]
        break;
 8002be2:	e010      	b.n	8002c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <UART_SetConfig+0x56c>)
 8002be6:	61fb      	str	r3, [r7, #28]
        break;
 8002be8:	e00d      	b.n	8002c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bea:	f7fe ff55 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8002bee:	61f8      	str	r0, [r7, #28]
        break;
 8002bf0:	e009      	b.n	8002c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bf6:	61fb      	str	r3, [r7, #28]
        break;
 8002bf8:	e005      	b.n	8002c06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c04:	bf00      	nop
    }

    if (pclk != 0U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d019      	beq.n	8002c40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	085a      	lsrs	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	441a      	add	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	d909      	bls.n	8002c3a <UART_SetConfig+0x546>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2c:	d205      	bcs.n	8002c3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	e002      	b.n	8002c40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3728      	adds	r7, #40	@ 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40008000 	.word	0x40008000
 8002c60:	00f42400 	.word	0x00f42400

08002c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01a      	beq.n	8002d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d62:	d10a      	bne.n	8002d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b098      	sub	sp, #96	@ 0x60
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002db8:	f7fd fe7a 	bl	8000ab0 <HAL_GetTick>
 8002dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d12e      	bne.n	8002e2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f88c 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d021      	beq.n	8002e2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e6      	bne.n	8002de6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e062      	b.n	8002ef0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d149      	bne.n	8002ecc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f856 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d03c      	beq.n	8002ecc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e6      	bne.n	8002e52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea4:	61fa      	str	r2, [r7, #28]
 8002ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e011      	b.n	8002ef0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3758      	adds	r7, #88	@ 0x58
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	e04f      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d04b      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fd fdcd 	bl	8000ab0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e04e      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d037      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d034      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	d031      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d110      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f838 	bl	8002fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2208      	movs	r2, #8
 8002f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e029      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f84:	d111      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f81e 	bl	8002fd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e00f      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d0a0      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b095      	sub	sp, #84	@ 0x54
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ffa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ffe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e6      	bne.n	8002fda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3308      	adds	r3, #8
 8003012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	61fb      	str	r3, [r7, #28]
   return(result);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800302c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003044:	2b01      	cmp	r3, #1
 8003046:	d118      	bne.n	800307a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	60bb      	str	r3, [r7, #8]
   return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0310 	bic.w	r3, r3, #16
 800305c:	647b      	str	r3, [r7, #68]	@ 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	613b      	str	r3, [r7, #16]
   return(result);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e6      	bne.n	8003048 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800308e:	bf00      	nop
 8003090:	3754      	adds	r7, #84	@ 0x54
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <memset>:
 800309a:	4402      	add	r2, r0
 800309c:	4603      	mov	r3, r0
 800309e:	4293      	cmp	r3, r2
 80030a0:	d100      	bne.n	80030a4 <memset+0xa>
 80030a2:	4770      	bx	lr
 80030a4:	f803 1b01 	strb.w	r1, [r3], #1
 80030a8:	e7f9      	b.n	800309e <memset+0x4>
	...

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4d0d      	ldr	r5, [pc, #52]	@ (80030e4 <__libc_init_array+0x38>)
 80030b0:	4c0d      	ldr	r4, [pc, #52]	@ (80030e8 <__libc_init_array+0x3c>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	2600      	movs	r6, #0
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	4d0b      	ldr	r5, [pc, #44]	@ (80030ec <__libc_init_array+0x40>)
 80030be:	4c0c      	ldr	r4, [pc, #48]	@ (80030f0 <__libc_init_array+0x44>)
 80030c0:	f000 f818 	bl	80030f4 <_init>
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	2600      	movs	r6, #0
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	0800315c 	.word	0x0800315c
 80030e8:	0800315c 	.word	0x0800315c
 80030ec:	0800315c 	.word	0x0800315c
 80030f0:	08003160 	.word	0x08003160

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
